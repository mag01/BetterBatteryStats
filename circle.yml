version: 2
jobs:
  build:
    working_directory: ~/code
    docker:
      - image: circleci/android:api-28
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - checkout
      - restore_cache:
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - run:
          name: chmod permissions
          command: chmod +x ./gradlew
      - run:
          name: scripts permissions
          command: chmod +x ./circleciscripts/*.sh

      - run:
          name: Decrypt env vars
          command: ./circleciscripts/decrypt_env_vars.sh
      - run:
          name: Make env vars available
          command: cat secret-env-plain >> $BASH_ENV
      - run:
          name: Download keystore
          command: ./circleciscripts/download_keystore.sh
      - run:
          name: Download Dependencies
          command: ./gradlew androidDependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - run:
          name: Build
          command: ./gradlew build
      - store_artifacts:
          path: app/build/outputs/apk
          destination: apks
      - persist_to_workspace:
          root: app
          paths:
            - build

  test:
    working_directory: ~/code
    docker:
      - image: circleci/android:api-28
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - checkout
      - attach_workspace:
          at: app
      - restore_cache:
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - run:
          name: chmod permissions
          command: chmod +x ./gradlew
      - run:
          name: Run unit tests
          command: ./gradlew test
      - run:
          name: Run Lint Tests
          command: ./gradlew lint test
      - store_artifacts:
          path: app/build/reports
          destination: reports
      - store_test_results:
          path: app/build/test-results

  deploy-hockeyapp:
    working_directory: ~/code
    docker:
      - image: circleci/android:api-28
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - checkout
      - attach_workspace:
          at: app
      - restore_cache:
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - run:
          name: scripts permissions
          command: chmod +x ./circleciscripts/*.sh
      - run:
          name: Deploy to hockeyapp
          command: source ./circleciscripts/deployHockeyApp.sh && uploadToHockeyApp

  deploy-gplay:
    working_directory: ~/code
    docker:
      - image: circleci/android:api-28
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - checkout
      - attach_workspace:
          at: app
      - restore_cache:
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - run:
          name: chmod permissions
          command: chmod +x ./gradlew
      - run:
          name: scripts permissions
          command: chmod +x ./circleciscripts/*.sh
      - run:
          name: Decrypt env vars
          command: ./circleciscripts/decrypt_env_vars.sh
      - run:
          name: Make env vars available
          command: cat secret-env-plain >> $BASH_ENV
      - run:
          name: Download keystore
          command: ./circleciscripts/download_keystore.sh
      - run:
          name: Download keystore
          command: ./circleciscripts/download_pubprofile.sh
      - run:
          name: Deploy to gplay
          command: ./gradlew publishApkGplayRelease

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build
      - test:
          requires:
            - build
      - deploy-hockeyapp: # never for branches
          requires:
            - test
          filters:
            branches:
              only:
                - master

      - hold: # requires manual approval, never for branches
          type: approval
          requires:
            - test
          filters:
            branches:
              only:
                - master

      - deploy-gplay: # when manual approval and never for branches
          requires:
            - hold
          filters:
#            tags:
#              only: /^release.*/
            branches:
              only:
                - master

